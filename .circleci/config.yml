# CircleCI v2.1 Config
version: 2.1

##
# orbs
#
# Orbs used in this pipeline
##
orbs:
  anchore: anchore/anchore-engine@1.6.0
  slack: circleci/slack@3.4.2

##
# defaults
#
# YAML defaults templates, in alphabetical order
##
defaults_Dependencies: &defaults_Dependencies |
    apk --no-cache add git
    apk --no-cache add ca-certificates
    apk --no-cache add curl
    apk --no-cache add openssh-client
    apk add --no-cache -t build-dependencies make gcc g++ python libtool autoconf automake
    npm config set unsafe-perm true
    npm install -g node-gyp

defaults_awsCliDependencies: &defaults_awsCliDependencies |
    apk --no-cache add \
            python \
            py-pip \
            groff \
            less \
            mailcap
    pip install --upgrade awscli==1.14.5 s3cmd==2.0.1 python-magic
    apk -v --purge del py-pip

defaults_license_scanner: &defaults_license_scanner
  name: Install and set up license-scanner
  command: |
    git clone https://github.com/mojaloop/license-scanner /tmp/license-scanner
    cd /tmp/license-scanner && make build default-files set-up

##
# Executors
#
# CircleCI Executors
##
executors:
  default-docker:
    working_directory: /home/circleci/project
    docker:
      - image: node:12.16.1-alpine

  default-machine:
    machine:
      image: ubuntu-1604:201903-01

##
# Jobs
#
# A map of CircleCI jobs
##
jobs:
  test-setup:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Access npm folder as root
          command: cd $(npm root -g)/npm
      - run:
          name: Update NPM install
          command: npm ci
      - run:
          name: Delete build dependencies
          command: apk del build-dependencies
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

  test-unit:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - restore_cache:
          keys:
          - dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Execute unit tests
          command: npm run test:unit -- --reporters=default --reporters=jest-junit
      - run:
          name: prepare test/results
          command: |
            mkdir -p test/results
            mv junit.xml test/results
      - store_artifacts:
          path: ./test/results
          prefix: test
      - store_test_results:
          path: ./test/results

  test-coverage:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          name: Install AWS CLI dependencies
          command: *defaults_awsCliDependencies
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Execute code coverage check
          command: npm run test:coverage-check
      - store_artifacts:
          path: coverage
          prefix: test
      - store_test_results:
          path: coverage

  build-local:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: Build Docker local image
          command: |
            echo "Building Docker image: local"
            docker build -t $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local .
      - run:
          name: Save docker image to workspace
          command: docker save -o /tmp/docker-image.tar $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local
      - persist_to_workspace:
          root: /tmp
          paths:
            - ./docker-image.tar

  # TODO: run on only master
  release:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - restore_cache:
          keys:
          - dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Configure git + ssh
          command: |
            git config user.email "mojaloop@circleci.com"
            git config user.name "circleci"
            git checkout ${CIRCLE_BRANCH}
            mkdir -p ~/.ssh
            ssh-keyscan -p 443 ssh.github.com >> ~/.ssh/known_hosts
            ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Generate changelog and bump package version
          command: npm run release
      - run:
          name: Push the release
          command: git push --follow-tags origin ${CIRCLE_BRANCH}

  # TODO: modify git release message to be changelog
  publish:
    executor: default-machine
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: docker load -i /tmp/docker-image.tar
      - run:
          name: Login to Docker Hub
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Re-tag pre built image
          command: |
            docker tag $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:latest
            docker tag $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:${CIRCLE_TAG}
      - run:
          name: Publish Docker image latest tag to Docker Hub
          command: |
            echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:latest"
            docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:latest
            echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:${CIRCLE_TAG}"
            docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:${CIRCLE_TAG}

      # - slack/status:
      #     webhook: "$SLACK_WEBHOOK_ANNOUNCEMENT"
      #     success_message: '*"${CIRCLE_PROJECT_REPONAME}"* - Release \`"${CIRCLE_TAG}"\` \nhttps://github.com/mojaloop/"${CIRCLE_PROJECT_REPONAME}"/releases/tag/"${CIRCLE_TAG}"'

##
# Workflows
#
# CircleCI Workflow config
##
workflows:
  version: 2

  build_test_release:
    jobs:
      - build-local:
          context: org-global
          filters:
            tags:
              only: /.*/

      - test-setup:
          context: org-global
          filters:
            tags:
              only: /.*/

      - test-unit:
          requires:
            - test-setup
          context: org-global
          filters:
            tags:
              only: /.*/

      - test-coverage:
          requires:
            - test-setup
          context: org-global
          filters:
            tags:
              only: /.*/


      # New commits to master release automatically
      - release:
          context: org-global
          requires:
            - build-local
            - test-unit
            - test-coverage
          filters:
            branches:
              only:
                - master

      # New Tags are built and deployed as docker artifacts
      - publish:
          context: org-global
          requires:
            - build-local
            - test-unit
            - test-coverage
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /.*/
